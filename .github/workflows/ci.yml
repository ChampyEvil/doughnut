# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: dough CI CD

on: push
env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ARTIFACT: "doughnut"
  VERSION: "0.0.1-SNAPSHOT"
  GCS_BUCKET: "dough-01"

jobs:
  unit-e2e-tests-run:
    name: Unit & E2E tests then GCP MIG rolling-update
    runs-on: ubuntu-20.04
    steps:
      - name: Setup MySQL DB Server 8.0
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "8.0"
          character set server: "utf8mb4"
          collation server: "utf8mb4_unicode_ci"
          mysql database: "doughnut_test"
          mysql user: ${{ secrets.DBUSER }}
          mysql password: ${{ secrets.DBPASSWORD }}
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          architecture: x64
      - name: DB Migration unit test
        run: backend/gradlew -p backend testDBMigrate -Dspring.profiles.active=test
      - name: Unit tests with Gradle
        run: backend/gradlew -p backend test -Dspring.profiles.active=test
      - name: Flutter frontend test and build
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.4'
      - run: cd frontend && flutter config --enable-web
      - run: cd frontend && flutter clean
      - run: cd frontend && flutter pub get
      - run: cd frontend && flutter test
      - run: cd frontend && flutter build web
      - name: E2E tests with Cypress
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          headless: true
          config: pageLoadTimeout=100000,video=false
          install-command: yarn
          start: yarn sut
      - name: Build production application jar artifact
        run: backend/gradlew -p backend build -x test -Dspring.profiles.active=prod
      - name: Setup Google Cloud SDK with Service Account
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Upload production application jar to Google Cloud Storage
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: backend/build/libs/doughnut-0.0.1-SNAPSHOT.jar
          destination: dough-01/backend_app_jar
      - name: Perform rolling replace to GCP MIG doughnut-app-group
        run: infra/scripts/perform-rolling-replace-app-mig.sh
      - name: Slack notify dough_ci_cd channel of CI/CD results
        uses: adamkdean/simple-slack-notify@master
        if: always()
        with:
          channel: "#dough_ci_cd"
          status: ${{ job.status }}
          success_text: "doughnut CI/CD (#${env.GITHUB_RUN_NUMBER}) completed Successfully"
          failure_text: "doughnut CI/CD (#${env.GITHUB_RUN_NUMBER}) Failed"
          cancelled_text: "doughnut CI/CD (#${env.GITHUB_RUN_NUMBER}) was Cancelled"
          fields: |
            [{ "title": "Action URL", "value": "${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}"}]
