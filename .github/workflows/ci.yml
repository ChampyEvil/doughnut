# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: doughnut CI

on: push
env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ARTIFACT: "doughnut"
  VERSION: "0.0.1-SNAPSHOT"
  GCS_BUCKET: "dough-01"

jobs:
  Backend-unit-tests:
    name: Backend Unit tests with Database
    runs-on: ubuntu-20.04
    steps:
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: "zulu"
          architecture: x64
      - name: Setup MySQL DB Server 8.0
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "8.0"
          character set server: "utf8mb4"
          collation server: "utf8mb4_unicode_ci"
          mysql database: "doughnut_test"
          mysql user: ${{ secrets.DBUSER }}
          mysql password: ${{ secrets.DBPASSWORD }}
          host port: 3309
          container port: 3309
      - name: Cache local gradle repository & artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: DB Migration unit test
        run: ./gradlew testDBMigrate -Dspring.profiles.active=test
      - name: Unit tests with Gradle
        run: ./gradlew test -Dspring.profiles.active=test

  Frontend-linting:
    name: Frontend Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Cache yarn directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: eslint
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: yarn frontend:lint

  Frontend-unit-tests:
    name: Frontend Unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Cache yarn directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Unit tests with jest & vue-jest
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: yarn frontend:test

  mobile-unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "2.5.3"
      - run: flutter pub get
        working-directory: ./doughnut_mobile
      - run: flutter test
        working-directory: ./doughnut_mobile

  drive_ios:
    strategy:
      matrix:
        device:
          - "iPhone 11"
      fail-fast: false
    runs-on: macos-latest
    steps:
      - name: List Simulators
        run: xcrun xctrace list devices
      - name: Start Simulator
        run: xcrun simctl boot "${{ matrix.device }}"
      - uses: actions/checkout@v1
      - uses: ./.github/starting_backend_actions
        with:
          dbuser: ${{ secrets.DBUSER }}
          dbpassword: ${{ secrets.DBPASSWORD }}
          db_url: ${{ secrets.CI_E2E_DB_URL }}
      - uses: ./.github/mobile_actions
        with:
          flutter-version: "2.5.3"
      - run: dart test_driver/app_test.dart
        working-directory: ./doughnut_mobile

  drive_android:
    runs-on: macos-latest
    #creates a build matrix for your jobs
    strategy:
      #set of different configurations of the virtual environment.
      matrix:
        api-level: [29]
    steps:
      - uses: actions/checkout@v1
      - uses: ./.github/starting_backend_actions
        with:
          dbuser: ${{ secrets.DBUSER }}
          dbpassword: ${{ secrets.DBPASSWORD }}
          db_url: ${{ secrets.CI_E2E_DB_URL }}
      - uses: ./.github/mobile_actions
        with:
          flutter-version: "2.5.3"
      - name: Run Flutter Driver tests
        uses: reactivecircus/android-emulator-runner@v2.21.0
        with:
          api-level: ${{ matrix.api-level }}
          script: |
            cd ./doughnut_mobile && dart test_driver/app_test.dart

  E2E-tests:
    name: End-to-End tests with Database
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        spec:
          - |
            cypress/integration/b*/**
            cypress/integration/c*/**
          - |
            cypress/integration/t*/**
            cypress/integration/u*/**
          - |
            cypress/integration/n*/**
          - |
            cypress/integration/p*/**
            cypress/integration/r*/**
    steps:
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: "zulu"
          architecture: x64
      - name: Setup MySQL DB Server 8.0
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: "8.0"
          character set server: "utf8mb4"
          collation server: "utf8mb4_unicode_ci"
          mysql database: "doughnut_e2e_test"
          mysql user: ${{ secrets.DBUSER }}
          mysql password: ${{ secrets.DBPASSWORD }}
          host port: 3309
          container port: 3309
      - name: Cache yarn directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: End-to-End tests with Cypress
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          headless: true
          config: pageLoadTimeout=100000,video=false,watchForFileChanges=false
          install-command: yarn --frozen-lock-file --silent
          build: yarn frontend:build
          start: yarn sut
          wait-on: "http://127.0.0.1:9081/api/healthcheck"
          wait-on-timeout: 120
          spec: ${{ matrix.spec }}

  Package-n-Deploy:
    name: Package & GCP MIG Rolling Update Deploy
    runs-on: ubuntu-20.04
    needs:
      [Backend-unit-tests, Frontend-linting, Frontend-unit-tests, E2E-tests]
    steps:
      - name: Code Checkout
        uses: actions/checkout@v2
      - name: Cache yarn directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build frontend
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - run: yarn frontend:build
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: "zulu"
          architecture: x64
      - name: Cache local gradle repository & artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build application jar artifact
        run: backend/gradlew -p backend build -x test -Dspring.profiles.active=prod
      - name: Setup Google Cloud SDK with Service Account
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Upload production application jar to Google Cloud Storage
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: backend/build/libs/doughnut-0.0.1-SNAPSHOT.jar
          destination: dough-01/backend_app_jar
      - name: Perform rolling replace to GCP MIG doughnut-app-group
        run: infra/scripts/perform-rolling-replace-app-mig.sh

  Slack-Notify:
    name: Single summary slack notification for entire workflow
    runs-on: ubuntu-20.04
    needs:
      [
        Backend-unit-tests,
        Frontend-linting,
        Frontend-unit-tests,
        mobile-unit-test,
        E2E-tests,
        Package-n-Deploy,
      ]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: 8398a7/action-slack@v3
        if: env.WORKFLOW_CONCLUSION == 'failure'
        with:
          status: failure
          fields: repo,commit,message,author,action,workflow,eventName
