package com.odde.doughnut.services;

import com.fasterxml.jackson.databind.JsonNode;
import com.odde.doughnut.entities.Note;
import com.odde.doughnut.factoryServices.quizFacotries.QuizQuestionNotPossibleException;
import com.odde.doughnut.services.openAiApis.OpenAIChatAboutNoteRequestBuilder;
import com.odde.doughnut.services.openAiApis.OpenAiApiHandler;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import java.nio.charset.StandardCharsets;

public class AiQuestionGenerator {
  private final Note note;
  private final OpenAiApiHandler openAiApiHandler;

  public AiQuestionGenerator(Note note, OpenAiApiHandler openAiApiHandler) {
    this.note = note;
    this.openAiApiHandler = openAiApiHandler;
  }

  public AIGeneratedQuestion getAiGeneratedQuestion() throws QuizQuestionNotPossibleException {
    boolean gpt3Failed = false;
    final boolean firstTryByGPT4 = shortContent();
    try {
      final AIGeneratedQuestion question = getValidQuestion(firstTryByGPT4);
      if (firstTryByGPT4) return question;
      if (questionMakeSense(question)) {
        question.stem += " (by GPT 3.5)";
        return question;
      }
    } catch (QuizQuestionNotPossibleException e) {
      if (firstTryByGPT4) throw e;
      gpt3Failed = true;
    }
    final AIGeneratedQuestion gpt4question = getValidQuestion(true);
    gpt4question.stem +=
        gpt3Failed ? "(GPT 3.5 failed and gen again by 4)" : " (regenerated by GPT-4)";
    return gpt4question;
  }

  private Boolean questionMakeSense(AIGeneratedQuestion question) {
    ChatCompletionRequest chatRequest =
        new OpenAIChatAboutNoteRequestBuilder(note.getPath())
            .detailsOfNoteOfCurrentFocus(note)
            .validateQuestionAgain(question)
            .maxTokens(1500)
            .build();

    return openAiApiHandler
        .getFunctionCallArguments(chatRequest)
        .flatMap(
            jsonNode ->
                OpenAIChatAboutNoteRequestBuilder.QuestionEvaluation.getQuestionEvaluation(
                    jsonNode))
        .map(eq -> eq.makeSense(question.correctChoiceIndex))
        .orElse(false);
  }

  private AIGeneratedQuestion getValidQuestion(boolean useGPT4)
      throws QuizQuestionNotPossibleException {
    return AIGeneratedQuestion.getValidQuestion(getAiGeneratedQuestionJson(useGPT4));
  }

  private JsonNode getAiGeneratedQuestionJson(boolean shortContent)
      throws QuizQuestionNotPossibleException {
    OpenAIChatAboutNoteRequestBuilder openAIChatAboutNoteRequestBuilder =
        new OpenAIChatAboutNoteRequestBuilder(note.getPath())
            .detailsOfNoteOfCurrentFocus(note)
            .userInstructionToGenerateQuestion()
            .maxTokens(1500);
    if (shortContent) {
      openAIChatAboutNoteRequestBuilder.useGPT4();
    }
    ChatCompletionRequest chatRequest = openAIChatAboutNoteRequestBuilder.build();

    return openAiApiHandler
        .getFunctionCallArguments(chatRequest)
        .orElseThrow(QuizQuestionNotPossibleException::new);
  }

  private boolean shortContent() {
    int length = 0;
    length += note.getTitle().getBytes(StandardCharsets.UTF_8).length;
    if (!note.isDescriptionBlankHtml()) {
      length += note.getDescription().getBytes(StandardCharsets.UTF_8).length;
    }
    return length < 300;
  }
}
