/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/user": {
    get: operations["getUserProfile"];
    post: operations["createUser"];
  };
  "/api/testability/use_real_sandbox_github_and_close_all_github_issues": {
    post: operations["closeAllGithubIssues"];
  };
  "/api/testability/update_current_user": {
    post: operations["updateCurrentUser"];
  };
  "/api/testability/trigger_exception": {
    post: operations["triggerException"];
  };
  "/api/testability/time_travel_relative_to_now": {
    post: operations["timeTravelRelativeToNow"];
  };
  "/api/testability/time_travel": {
    post: operations["timeTravel"];
  };
  "/api/testability/share_to_bazaar": {
    post: operations["shareToBazaar"];
  };
  "/api/testability/seed_suggested_questions": {
    post: operations["seedSuggestedQuestion"];
  };
  "/api/testability/seed_notes": {
    post: operations["seedNote"];
  };
  "/api/testability/seed_circle": {
    post: operations["seedCircle"];
  };
  "/api/testability/replace_service_url": {
    post: operations["replaceServiceUrl"];
  };
  "/api/testability/randomizer": {
    post: operations["randomizer"];
  };
  "/api/testability/link_notes": {
    post: operations["linkNotes"];
  };
  "/api/testability/feature_toggle": {
    get: operations["getFeatureToggle"];
    post: operations["enableFeatureToggle"];
  };
  "/api/testability/clean_db_and_reset_testability_settings": {
    post: operations["resetDBAndTestabilitySettings"];
  };
  "/api/subscriptions/{subscription}": {
    post: operations["update"];
  };
  "/api/subscriptions/{subscription}/delete": {
    post: operations["destroySubscription"];
  };
  "/api/subscriptions/notebooks/{notebook}/subscribe": {
    post: operations["createSubscription"];
  };
  "/api/settings/current-model-version": {
    get: operations["getCurrentModelVersions"];
    post: operations["setCurrentModelVersions"];
  };
  "/api/reviews": {
    post: operations["create"];
  };
  "/api/review-points/{reviewPoint}/self-evaluate": {
    post: operations["selfEvaluate"];
  };
  "/api/review-points/{reviewPoint}/remove": {
    post: operations["removeFromRepeating"];
  };
  "/api/review-points/{reviewPoint}/mark-as-repeated": {
    post: operations["markAsRepeated"];
  };
  "/api/quiz-questions/{quizQuestion}/suggest-fine-tuning": {
    post: operations["suggestQuestionForFineTuning"];
  };
  "/api/quiz-questions/{quizQuestion}/regenerate": {
    post: operations["regenerate"];
  };
  "/api/quiz-questions/{quizQuestion}/contest": {
    post: operations["contest"];
  };
  "/api/quiz-questions/{quizQuestion}/answer": {
    post: operations["answerQuiz"];
  };
  "/api/quiz-questions/generate-question": {
    post: operations["generateQuestion"];
  };
  "/api/notes/{parentNote}/create": {
    post: operations["createNote"];
  };
  "/api/notes/{note}/updateWikidataId": {
    post: operations["updateWikidataId"];
  };
  "/api/notes/{note}/review-setting": {
    post: operations["updateReviewSetting"];
  };
  "/api/notes/{note}/delete": {
    post: operations["deleteNote"];
  };
  "/api/notes/search": {
    post: operations["searchForLinkTarget"];
  };
  "/api/notebooks/{notebook}": {
    post: operations["update_1"];
  };
  "/api/notebooks/{notebook}/share": {
    post: operations["shareNote"];
  };
  "/api/notebooks/create": {
    post: operations["createNotebook"];
  };
  "/api/links/{link}": {
    get: operations["show_2"];
    post: operations["updateLink"];
  };
  "/api/links/{link}/{perspective}/delete": {
    post: operations["deleteLink"];
  };
  "/api/links/create/{sourceNote}/{targetNote}": {
    post: operations["linkNoteFinalize"];
  };
  "/api/fine-tuning/{suggestedQuestion}/duplicate": {
    post: operations["duplicate"];
  };
  "/api/fine-tuning/{suggestedQuestion}/delete": {
    post: operations["delete"];
  };
  "/api/fine-tuning/upload-and-trigger-fine-tuning": {
    post: operations["uploadAndTriggerFineTuning"];
  };
  "/api/circles": {
    get: operations["index"];
    post: operations["createCircle"];
  };
  "/api/circles/{circle}/notebooks": {
    post: operations["createNotebook_1"];
  };
  "/api/circles/join": {
    post: operations["joinCircle"];
  };
  "/api/ai/{note}/completion": {
    post: operations["getCompletion"];
  };
  "/api/ai/recreate-all-assistants": {
    post: operations["recreateAllAssistants"];
  };
  "/api/ai/generate-image": {
    post: operations["generateImage"];
  };
  "/api/ai/chat": {
    post: operations["chat"];
  };
  "/api/ai/answer-clarifying-question": {
    post: operations["answerCompletionClarifyingQuestion"];
  };
  "/api/user/{user}": {
    patch: operations["updateUser"];
  };
  "/api/text_content/{note}/topic-constructor": {
    patch: operations["updateNoteTopicConstructor"];
  };
  "/api/text_content/{note}/details": {
    patch: operations["updateNoteDetails"];
  };
  "/api/notes/{note}": {
    get: operations["show_1"];
    patch: operations["updateNote"];
  };
  "/api/notes/{note}/undo-delete": {
    patch: operations["undoDeleteNote"];
  };
  "/api/fine-tuning/{suggestedQuestion}/update-suggested-question-for-fine-tuning": {
    patch: operations["updateSuggestedQuestionForFineTuning"];
  };
  "/api/wikidata/search/{search}": {
    get: operations["searchWikidata"];
  };
  "/api/wikidata/entity-data/{wikidataId}": {
    get: operations["fetchWikidataEntityDataByID"];
  };
  "/api/user/current-user-info": {
    get: operations["currentUserInfo"];
  };
  "/api/testability/github_issues": {
    get: operations["githubIssues"];
  };
  "/api/reviews/repeat": {
    get: operations["repeatReview"];
  };
  "/api/reviews/overview": {
    get: operations["overview"];
  };
  "/api/reviews/initial": {
    get: operations["initialReview"];
  };
  "/api/reviews/answers/{answer}": {
    get: operations["showAnswer"];
  };
  "/api/review-points/{reviewPoint}": {
    get: operations["show"];
  };
  "/api/review-points/{reviewPoint}/random-question": {
    get: operations["generateRandomQuestion"];
  };
  "/api/notes/{note}/position": {
    get: operations["getPosition"];
  };
  "/api/notes/{note}/note-info": {
    get: operations["getNoteInfo"];
  };
  "/api/notebooks": {
    get: operations["myNotebooks"];
  };
  "/api/healthcheck": {
    get: operations["ping"];
  };
  "/api/fine-tuning/all-suggested-questions-for-fine-tuning": {
    get: operations["getAllSuggestedQuestions"];
  };
  "/api/failure-reports": {
    get: operations["failureReports"];
  };
  "/api/failure-reports/{failureReport}": {
    get: operations["show_3"];
  };
  "/api/data_upgrade": {
    get: operations["dataUpgrade"];
  };
  "/api/circles/{circle}": {
    get: operations["showCircle"];
  };
  "/api/bazaar": {
    get: operations["bazaar"];
  };
  "/api/ai/available-gpt-models": {
    get: operations["getAvailableGptModels"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Circle: {
      /** Format: int32 */
      id?: number;
      name: string;
    };
    Ownership: {
      /** Format: int32 */
      id?: number;
      circle?: components["schemas"]["Circle"];
    };
    User: {
      /** Format: int32 */
      id?: number;
      name: string;
      externalIdentifier?: string;
      ownership?: components["schemas"]["Ownership"];
      /** Format: int32 */
      dailyNewNotesCount?: number;
      spaceIntervals?: string;
      aiQuestionTypeOnlyForReview?: boolean;
      admin?: boolean;
    };
    TimeTravelRelativeToNow: {
      /** Format: int32 */
      hours?: number;
    };
    TimeTravel: {
      travel_to?: string;
    };
    MCQWithAnswer: {
      stem?: string;
      choices: string[];
      /** Format: int32 */
      correctChoiceIndex: number;
    };
    QuestionSuggestionParams: {
      comment?: string;
      preservedQuestion?: components["schemas"]["MCQWithAnswer"];
      preservedNoteContent?: string;
      positiveFeedback?: boolean;
      realCorrectAnswers?: string;
    };
    SeedSuggestedQuestions: {
      examples?: components["schemas"]["QuestionSuggestionParams"][];
    };
    SeedInfo: {
      seedNotes?: components["schemas"]["SeedNote"][];
      externalIdentifier?: string;
      circleName?: string;
    };
    SeedNote: {
      topicConstructor?: string;
      details?: string;
      testingParent?: string;
      skipReview?: boolean;
      url?: string;
      pictureUrl?: string;
      pictureMask?: string;
      wikidataId?: string;
    };
    Randomization: {
      choose?: string;
    };
    Note: {
      topic?: string;
      topicConstructor?: string;
      details?: string;
      /** Format: int32 */
      parentId?: number;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int32 */
      id?: number;
      noteAccessories?: components["schemas"]["NoteAccessories"];
      /** Format: date-time */
      deletedAt?: string;
      wikidataId?: string;
      pictureWithMask?: components["schemas"]["PictureWithMask"];
    };
    NoteAccessories: {
      url?: string;
      pictureUrl?: string;
      pictureMask?: string;
      useParentPicture?: boolean;
    };
    Notebook: {
      /** Format: int32 */
      id?: number;
      ownership?: components["schemas"]["Ownership"];
      headNote?: components["schemas"]["Note"];
      skipReviewEntirely?: boolean;
      /** Format: date-time */
      deletedAt?: string;
    };
    PictureWithMask: {
      notePicture?: string;
      pictureMask?: string;
    };
    Subscription: {
      headNote?: components["schemas"]["Note"];
      title?: string;
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      dailyTargetOfNewNotes?: number;
      user?: components["schemas"]["User"];
      notebook?: components["schemas"]["Notebook"];
    };
    GlobalAiModelSettings: {
      questionGenerationModel?: string;
      evaluationModel?: string;
      othersModel?: string;
    };
    InitialInfo: {
      /** Format: int32 */
      thingId?: number;
      skipReview?: boolean;
    };
    Link: {
      /** Format: int32 */
      id?: number;
      sourceNote?: components["schemas"]["Note"];
      targetNote?: components["schemas"]["Note"];
      /** @enum {string} */
      linkType?:
        | "no link"
        | "related to"
        | "a specialization of"
        | "an application of"
        | "an instance of"
        | "a part of"
        | "tagged by"
        | "an attribute of"
        | "the opposite of"
        | "author of"
        | "using"
        | "an example of"
        | "before"
        | "similar to"
        | "confused with";
    };
    ReviewPoint: {
      /** Format: int32 */
      id?: number;
      thing?: components["schemas"]["Thing"];
      /** Format: date-time */
      lastReviewedAt?: string;
      /** Format: date-time */
      nextReviewAt?: string;
      /** Format: date-time */
      initialReviewedAt?: string;
      /** Format: int32 */
      repetitionCount?: number;
      /** Format: int32 */
      forgettingCurveIndex?: number;
      removedFromReview?: boolean;
    };
    Thing: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      createdAt?: string;
      note?: components["schemas"]["Note"];
      link?: components["schemas"]["Link"];
    };
    SelfEvaluation: {
      /** Format: int32 */
      adjustment?: number;
    };
    QuizQuestionEntity: {
      /** Format: int32 */
      id?: number;
      thing?: components["schemas"]["Thing"];
      /** Format: int32 */
      questionTypeId?: number;
      rawJsonQuestion?: string;
      categoryLink?: components["schemas"]["Link"];
      optionThingIds?: string;
      /** Format: int32 */
      correctAnswerIndex?: number;
      /** Format: date-time */
      createdAt?: string;
      mcqWithAnswer?: components["schemas"]["MCQWithAnswer"];
    };
    QuestionSuggestionCreationParams: {
      comment?: string;
      isPositiveFeedback?: boolean;
    };
    SuggestedQuestionForFineTuning: {
      /** Format: int32 */
      id?: number;
      comment?: string;
      preservedQuestion?: components["schemas"]["MCQWithAnswer"];
      preservedNoteContent?: string;
      realCorrectAnswers?: string;
      /** Format: date-time */
      createdAt?: string;
      positiveFeedback?: boolean;
    };
    Choice: {
      display?: string;
      pictureWithMask?: components["schemas"]["PictureWithMask"];
      picture?: boolean;
    };
    NotebookViewedByUser: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      headNoteId?: number;
      headNote?: components["schemas"]["Note"];
      skipReviewEntirely?: boolean;
      fromBazaar?: boolean;
      ownership?: components["schemas"]["Ownership"];
    };
    QuizQuestion: {
      /** Format: int32 */
      quizQuestionId?: number;
      /** @enum {string} */
      questionType?:
        | "CLOZE_SELECTION"
        | "SPELLING"
        | "PICTURE_TITLE"
        | "PICTURE_SELECTION"
        | "LINK_TARGET"
        | "LINK_SOURCE"
        | "LINK_SOURCE_WITHIN_SAME_LINK_TYPE"
        | "CLOZE_LINK_TARGET"
        | "DESCRIPTION_LINK_TARGET"
        | "WHICH_SPEC_HAS_INSTANCE"
        | "FROM_SAME_PART_AS"
        | "FROM_DIFFERENT_PART_AS"
        | "AI_QUESTION";
      stem?: string;
      mainTopic?: string;
      notebook?: components["schemas"]["NotebookViewedByUser"];
      choices?: components["schemas"]["Choice"][];
      pictureWithMask?: components["schemas"]["PictureWithMask"];
    };
    QuizQuestionContestResult: {
      reason?: string;
      rejected?: boolean;
    };
    Answer: {
      /** Format: int32 */
      id?: number;
      spellingAnswer?: string;
      /** Format: int32 */
      choiceIndex?: number;
    };
    AnsweredQuestion: {
      /** Format: int32 */
      answerId?: number;
      correct?: boolean;
      /** Format: int32 */
      correctChoiceIndex?: number;
      /** Format: int32 */
      choiceIndex?: number;
      answerDisplay?: string;
      reviewPoint?: components["schemas"]["ReviewPoint"];
      quizQuestion?: components["schemas"]["QuizQuestion"];
    };
    NoteCreationDTO: {
      topicConstructor?: string;
      /** @enum {string} */
      linkTypeToParent?:
        | "no link"
        | "related to"
        | "a specialization of"
        | "an application of"
        | "an instance of"
        | "a part of"
        | "tagged by"
        | "an attribute of"
        | "the opposite of"
        | "author of"
        | "using"
        | "an example of"
        | "before"
        | "similar to"
        | "confused with";
      wikidataId?: string;
    };
    LinkViewed: {
      direct?: components["schemas"]["Link"][];
      reverse?: components["schemas"]["Link"][];
    };
    NotePositionViewedByUser: {
      /** Format: int32 */
      noteId?: number;
      notebook?: components["schemas"]["NotebookViewedByUser"];
      ancestors?: components["schemas"]["Note"][];
    };
    NoteRealm: {
      /** Format: int32 */
      id?: number;
      links?: {
        [key: string]: components["schemas"]["LinkViewed"];
      };
      children?: components["schemas"]["Note"][];
      note?: components["schemas"]["Note"];
      notePosition?: components["schemas"]["NotePositionViewedByUser"];
    };
    WikidataAssociationCreation: {
      wikidataId?: string;
    };
    ReviewSetting: {
      /** Format: int32 */
      id?: number;
      rememberSpelling?: boolean;
      skipReview?: boolean;
      /** Format: int32 */
      level?: number;
    };
    RedirectToNoteResponse: {
      /** Format: int32 */
      noteId?: number;
    };
    SearchTerm: {
      searchKey?: string;
      allMyNotebooksAndSubscriptions?: boolean;
      allMyCircles?: boolean;
      /** Format: int32 */
      note?: number;
    };
    LinkCreation: {
      /** @enum {string} */
      linkType:
        | "no link"
        | "related to"
        | "a specialization of"
        | "an application of"
        | "an instance of"
        | "a part of"
        | "tagged by"
        | "an attribute of"
        | "the opposite of"
        | "author of"
        | "using"
        | "an example of"
        | "before"
        | "similar to"
        | "confused with";
      fromTargetPerspective?: boolean;
      moveUnder?: boolean;
      asFirstChild?: boolean;
    };
    CircleJoiningByInvitation: {
      invitationCode: string;
    };
    AiCompletionParams: {
      detailsToComplete?: string;
    };
    AiCompletionRequiredAction: {
      toolCallId?: string;
      clarifyingQuestion?: components["schemas"]["ClarifyingQuestion"];
      contentToAppend?: string;
    };
    AiCompletionResponse: {
      threadId?: string;
      runId?: string;
      requiredAction?: components["schemas"]["AiCompletionRequiredAction"];
      lastMessage?: string;
    };
    ClarifyingQuestion: {
      question: string;
    };
    AiGeneratedImage: {
      b64encoded?: string;
    };
    ChatRequest: {
      userMessage?: string;
    };
    ChatResponse: {
      assistantMessage?: string;
    };
    AiCompletionAnswerClarifyingQuestionParams: {
      detailsToComplete?: string;
      threadId?: string;
      runId?: string;
      toolCallId?: string;
      answer?: string;
    };
    NoteUpdateTopicDTO: {
      topicConstructor?: string;
    };
    NoteUpdateDetailsDTO: {
      details?: string;
    };
    WikidataSearchEntity: {
      id?: string;
      label?: string;
      description?: string;
    };
    WikidataEntityData: {
      WikidataTitleInEnglish?: string;
      WikipediaEnglishUrl?: string;
    };
    CurrentUserInfo: {
      user?: components["schemas"]["User"];
      externalIdentifier?: string;
    };
    DueReviewPoints: {
      toRepeat?: number[];
      /** Format: int32 */
      dueInDays?: number;
    };
    ReviewStatus: {
      /** Format: int32 */
      toRepeatCount?: number;
      /** Format: int32 */
      learntCount?: number;
      /** Format: int32 */
      notLearntCount?: number;
      /** Format: int32 */
      toInitialReviewCount?: number;
    };
    NoteInfo: {
      reviewPoint?: components["schemas"]["ReviewPoint"];
      note?: components["schemas"]["NoteRealm"];
      /** Format: date-time */
      createdAt?: string;
      reviewSetting?: components["schemas"]["ReviewSetting"];
    };
    NotebooksViewedByUser: {
      notebooks?: components["schemas"]["NotebookViewedByUser"][];
      subscriptions?: components["schemas"]["Subscription"][];
    };
    FailureReport: {
      /** Format: int32 */
      id?: number;
      errorName: string;
      errorDetail: string;
      /** Format: int32 */
      issueNumber?: number;
      /** Format: date-time */
      createDatetime: string;
      githubIssue?: components["schemas"]["GithubIssue"];
    };
    GithubIssue: {
      title?: string;
      body?: string;
    };
    FailureReportForView: {
      failureReport?: components["schemas"]["FailureReport"];
      githubIssueUrl?: string;
    };
    CircleForUserView: {
      /** Format: int32 */
      id?: number;
      name?: string;
      invitationCode?: string;
      notebooks?: components["schemas"]["NotebooksViewedByUser"];
      members?: components["schemas"]["UserForOtherUserView"][];
    };
    UserForOtherUserView: {
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  getUserProfile: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createUser: {
    parameters: {
      query: {
        user: components["schemas"]["User"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  closeAllGithubIssues: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateCurrentUser: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  triggerException: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  timeTravelRelativeToNow: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeTravelRelativeToNow"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  timeTravel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TimeTravel"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  shareToBazaar: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  seedSuggestedQuestion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeedSuggestedQuestions"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  seedNote: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeedInfo"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: number;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  seedCircle: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  replaceServiceUrl: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  randomizer: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Randomization"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  linkNotes: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getFeatureToggle: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": boolean;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  enableFeatureToggle: {
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  resetDBAndTestabilitySettings: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Subscription"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Subscription"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  destroySubscription: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Subscription"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": number[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createSubscription: {
    parameters: {
      path: {
        notebook: components["schemas"]["Notebook"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Subscription"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Subscription"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCurrentModelVersions: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["GlobalAiModelSettings"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  setCurrentModelVersions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GlobalAiModelSettings"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["GlobalAiModelSettings"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InitialInfo"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  selfEvaluate: {
    parameters: {
      query: {
        reviewPoint: components["schemas"]["ReviewPoint"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SelfEvaluation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  removeFromRepeating: {
    parameters: {
      query: {
        reviewPoint: components["schemas"]["ReviewPoint"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  markAsRepeated: {
    parameters: {
      query: {
        reviewPoint: components["schemas"]["ReviewPoint"];
        successful: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  suggestQuestionForFineTuning: {
    parameters: {
      path: {
        quizQuestion: components["schemas"]["QuizQuestionEntity"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionSuggestionCreationParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestedQuestionForFineTuning"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  regenerate: {
    parameters: {
      path: {
        quizQuestion: components["schemas"]["QuizQuestionEntity"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["QuizQuestion"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  contest: {
    parameters: {
      path: {
        quizQuestion: components["schemas"]["QuizQuestionEntity"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["QuizQuestionContestResult"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  answerQuiz: {
    parameters: {
      path: {
        quizQuestion: components["schemas"]["QuizQuestionEntity"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Answer"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AnsweredQuestion"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  generateQuestion: {
    parameters: {
      query: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["QuizQuestion"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createNote: {
    parameters: {
      path: {
        parentNote: components["schemas"]["Note"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteCreationDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateWikidataId: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WikidataAssociationCreation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateReviewSetting: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewSetting"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RedirectToNoteResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteNote: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchForLinkTarget: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchTerm"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Note"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  update_1: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Notebook"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Notebook"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  shareNote: {
    parameters: {
      path: {
        notebook: components["schemas"]["Notebook"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Notebook"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createNotebook: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteCreationDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RedirectToNoteResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  show_2: {
    parameters: {
      path: {
        link: components["schemas"]["Link"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Link"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateLink: {
    parameters: {
      query: {
        link: components["schemas"]["Link"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkCreation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  deleteLink: {
    parameters: {
      path: {
        link: components["schemas"]["Link"];
        perspective: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  linkNoteFinalize: {
    parameters: {
      path: {
        sourceNote: components["schemas"]["Note"];
        targetNote: components["schemas"]["Note"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkCreation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  duplicate: {
    parameters: {
      path: {
        suggestedQuestion: components["schemas"]["SuggestedQuestionForFineTuning"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestedQuestionForFineTuning"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  delete: {
    parameters: {
      path: {
        suggestedQuestion: components["schemas"]["SuggestedQuestionForFineTuning"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestedQuestionForFineTuning"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  uploadAndTriggerFineTuning: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  index: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Circle"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createCircle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Circle"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Circle"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  createNotebook_1: {
    parameters: {
      query: {
        circle: components["schemas"]["Circle"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteCreationDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RedirectToNoteResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  joinCircle: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CircleJoiningByInvitation"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["Circle"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getCompletion: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiCompletionParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AiCompletionResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  recreateAllAssistants: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: string;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  generateImage: {
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AiGeneratedImage"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  chat: {
    parameters: {
      query: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ChatResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  answerCompletionClarifyingQuestion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiCompletionAnswerClarifyingQuestionParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AiCompletionResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateUser: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["User"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateNoteTopicConstructor: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteUpdateTopicDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateNoteDetails: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteUpdateDetailsDTO"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  show_1: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateNote: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NoteAccessories"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  undoDeleteNote: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteRealm"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  updateSuggestedQuestionForFineTuning: {
    parameters: {
      path: {
        suggestedQuestion: components["schemas"]["SuggestedQuestionForFineTuning"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionSuggestionParams"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestedQuestionForFineTuning"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchWikidata: {
    parameters: {
      path: {
        search: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["WikidataSearchEntity"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  fetchWikidataEntityDataByID: {
    parameters: {
      path: {
        wikidataId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["WikidataEntityData"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  currentUserInfo: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CurrentUserInfo"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  githubIssues: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": {
            [key: string]: Record<string, never>;
          }[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  repeatReview: {
    parameters: {
      query: {
        timezone: string;
        dueindays?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["DueReviewPoints"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  overview: {
    parameters: {
      query: {
        timezone: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewStatus"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  initialReview: {
    parameters: {
      query: {
        timezone: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  showAnswer: {
    parameters: {
      path: {
        answer: components["schemas"]["Answer"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["AnsweredQuestion"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  show: {
    parameters: {
      path: {
        reviewPoint: components["schemas"]["ReviewPoint"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewPoint"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  generateRandomQuestion: {
    parameters: {
      path: {
        reviewPoint: components["schemas"]["ReviewPoint"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["QuizQuestion"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getPosition: {
    parameters: {
      query: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NotePositionViewedByUser"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getNoteInfo: {
    parameters: {
      path: {
        note: components["schemas"]["Note"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NoteInfo"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  myNotebooks: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NotebooksViewedByUser"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  ping: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAllSuggestedQuestions: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["SuggestedQuestionForFineTuning"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  failureReports: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  show_3: {
    parameters: {
      query: {
        failureReport: components["schemas"]["FailureReport"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["FailureReportForView"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  dataUpgrade: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  showCircle: {
    parameters: {
      path: {
        circle: components["schemas"]["Circle"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["CircleForUserView"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  bazaar: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["NotebooksViewedByUser"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  getAvailableGptModels: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string[];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
